// import the CP library
import cotfd;

// create the CP Solver 
Solver<CP> cp();


int n = 2;                   //Number of weeks
range G = 1..32;               //Golfers
range W = 1..n;
range WE = 0..n;                //Weeks
range S = 1..(G.getUp()/4);    //Slots


var<CP>{int} GAgainst[G,G](cp, WE);   

solve<cp>{
    
    forall(g1 in G, g2 in G)
        cp.post(GAgainst[g1,g2] == GAgainst[g2,g1]);

    forall(g in G)
        cp.post(GAgainst[g,g] == 0);

    forall(g1 in G, w in W)
        cp.post((sum(g2 in G: g2 != g1) (GAgainst[g1,g2] == w)) == 3);
    
    forall(w in W, g1 in G, g2 in G, g3 in G : g3 != g2 && g2 != g1 && g1 != g3)
        cp.post(((GAgainst[g1,g2] != w) || (GAgainst[g1,g3] != w)) || (GAgainst[g2,g3] == w));
} using{

    // Use a generic search procedure
    label(cp);
}

cout << GAgainst << endl;

forall(g1 in G)
{
    cout << g1 << ":";
    forall(w in W : w != 0)
    {
        forall(g2 in G :g1 != g2 && GAgainst[g1,g2].bound()  && GAgainst[g1,g2] == w)
            cout << g2 << ",";
        cout << ";";
    }
    cout << endl;
 }   
      
