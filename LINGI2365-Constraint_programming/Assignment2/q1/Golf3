// import the CP library
import cotfd;

// create the CP Solver 
Solver<CP> cp();


int n = 1;                   //Number of weeks
range G = 1..32;               //Golfers
range W = 1..9;                //Weeks
range S = 1..(G.getUp()/4);    //Slots


var<CP>{int} GPlanning[G,W](cp, S);   

solve<cp>{
    forall(w in W,s in S)
            cp.post((sum(g in G) (GPlanning[g,w] == s)) == 4);

    forall(g1 in G, g2 in G: g1 != g2)
        cp.post(sum(w in W)(GPlanning[g1,w] == GPlanning[g2,w]) <= 1);

} using{

    // Use a generic search procedure
    label(cp);
}

forall(g1 in G)
{
    cout << g1 << ":";
    forall(w in W)
    {
        forall(g2 in G : g1 != g2 && GPlanning[g1,w] == GPlanning[g2,w])
            cout << g2 << ",";
        cout << ";";
    }
    cout << endl;
 }   
        
