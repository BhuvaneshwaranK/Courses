// import the CP library
import cotfd;

int t0 = System.getCPUTime();


// create the CP Solver 
Solver<CP> cp();

string fString = System.getArgs()[2];


ifstream file(fString);

int nbEvents    = file.getInt();
int nbRooms     = file.getInt();
int nbFeatures  = file.getInt();
int nbStudents  = file.getInt();
int nbSlots     = 45;

range R     = 1..nbRooms;
range E     = 1..nbEvents;
range F     = 1..nbFeatures;
range S     = 1..nbStudents;
range T     = 1..nbSlots;

int roomsSizes[R];
int sAttends[S,E];  //1 if s attends to e
int rFeatures[R,F]; //1 if the room has the feature
int eFeatures[E,F]; //1 if the event need the feature


// Begin read file
forall(r in R)
    roomsSizes[r] = file.getInt();

forall(s in S)
    forall(e in E)
        sAttends[s,e] = file.getInt();

forall(r in R)
    forall(f in F)
        rFeatures[r,f] = file.getInt();

forall(e in E)
    forall(f in F)
        eFeatures[e,f] = file.getInt();

//end readfile


//size min in a room for an event
int eRoomSizeMin[E];
forall(e in E)
    eRoomSizeMin[e] = (sum(s in S)(sAttends[s,e] == 1));


//for every events what room can be used
set{int} roomsForEvent[E];
forall(e in E)
{
    forall(r in R : eRoomSizeMin[e] <= roomsSizes[r])
    {
        boolean roomOk = true;
        forall(f in F)
            if((eFeatures[e,f] == 1) && (rFeatures[r,f] != 1))
                roomOk = false;
        if(roomOk)
            roomsForEvent[e].insert(r);
    }
}

//events that cannot have the same time slot
set{int} eventNotWhen[E];
forall(e1 in E,e2 in E: e2> e1)
{
    int i = 1;
    boolean endLoop = false;
    while(i<=nbStudents && !endLoop)
    {
        if((sAttends[i,e1] == 1) && (sAttends[i,e2] == 1))
        {
            eventNotWhen[e1].insert(e2);
            endLoop = true;
        }
        i++;
    }
}

//link room slot with an id
tuple triple{int r; int t; int i;}

set{triple} Triples();
forall(r in R, t in T)
   Triples.insert(triple(r, t, ((r-1)*(T.getSize()) + t) ));


var<CP>{int} slotForEvent[E](cp, T);
var<CP>{int} roomForEvent[E](cp, R);
var<CP>{int} schedule[E](cp, 1..((nbRooms*nbSlots)+100));
Table<CP> t(all(e in Triples) e.r, all(e in Triples) e.t, all(e in Triples) e.i);


//remove all room that cannot hold an event from the domain
forall(e in E)
{
    inSet(roomForEvent[e],roomsForEvent[e]);
}


solve<cp>{
   
    //verify that each student has not multiple events at the same time
    forall(e1 in E, e2 in eventNotWhen[e1])
        cp.post(slotForEvent[e1] != slotForEvent[e2]);

    //redundant constraint to speed up the process
    forall(e in E)
    {
        cp.post((sum(t in T)(slotForEvent[e] == t)) <= nbRooms);
        cp.post((sum(r in R)(roomForEvent[e] == r)) <= nbSlots);
    }

    //avoid having 2 events on the same time slot in the same room
    cp.post(alldifferent(all(e in E)schedule[e]),onDomains);

    //link id to room and slots
    forall(e in E)
        cp.post(table(roomForEvent[e],slotForEvent[e], schedule[e], t));


} using{
    forall (e in E: !slotForEvent[e].bound()) by (slotForEvent[e].getSize())
        tryall<cp>(t in T: slotForEvent[e].memberOf(t))
        {
            label(slotForEvent[e], t);
        }
    
    forall (e in E: !roomForEvent[e].bound()) by (roomForEvent[e].getSize())
        tryall<cp>(r in R: roomForEvent[e].memberOf(r))
        {
            label(roomForEvent[e], r);
        }
}



cout << "event for a room" << endl;
forall(r in R)
{
    cout << r << ":" ;
    forall(e in E: roomForEvent[e]==r)
        cout << e << ",";
    cout << endl;
}


cout << "slots when room is used" << endl;
forall(r in R)
{
    cout << r << "     :" ;
    forall(e in E:(roomForEvent[e] == r))
        cout << slotForEvent[e] << " ";
    cout << endl;
}


int t1 = System.getCPUTime();
cout << "time: " << t1 - t0 << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
