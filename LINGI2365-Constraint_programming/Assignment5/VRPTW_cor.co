/*******************************************
Based on model for the VRPTW by SŽbastien Mouthuy
Usage:  comet VRPTW.co instance.txt
*******************************************/
import cotfd;
tuple instanceInfo{int n; int K; int Q; int[] demand; int[] tw_start; int[] tw_end; int[] service_duration; int[,] distance;}

int t0 = System.getCPUTime();
int st0;

// ++++++++++++++++ VARIABLES NECESSARY TO REPRESENT INSTANCE ++++++++++++++++

range Customers; 					// customers to be visited
range Depots;						// single depot is duplicated, one per vehicle
range CustomersAndDepots;			// customers to be visited and all depots
range Horizon; 						// from start of depot time window to end of depot time window 

int n;								// number of customers to visit
int K;								// number of vehicles
int Q;								// capacity of vehicles

int[] demand;						// demand for customers and depots
int[] tw_start;						// start of time window customers and depots
int[] tw_end;						// end of time window customers and depots
int[] service_duration;				// time needed to perform service for customers and depots
int[,] distance; 					// distance/travel time matrix

// ++++++++++++++++++++++++++++++ READING INSTANCE FILE ++++++++++++++++++++++++++++++
instanceInfo instance;
//instance = fillVariablesFromInstance(System.getArgs()[2]);

instance = fillVariablesFromInstance("D:\\info21\\git\\courses\\lingi2365-constraint_programming\\Assignment5\\Instances\\c104.txt");

// ++++++++++++++++++++++++++++++ FILLING THE INSTANCE VARIABLES ++++++++++++++++++++++++++++++
int Kup = instance.K;
int Kdown = 0;
int nch;
int nf;

while(Kup != Kdown+1)
{
st0 = System.getCPUTime();
K = (Kup+Kdown)/2; //chose next K to try

cout << "try K=" << K << endl;

n = instance.n;
//K = instance.K;
Q = instance.Q;

Customers = 1..n;
Depots = Customers.getUp()+1..Customers.getUp()+K; 
CustomersAndDepots = Customers.getLow()..Depots.getUp();

demand = new int[CustomersAndDepots];
tw_start = new int[CustomersAndDepots];
tw_end = new int[CustomersAndDepots];
service_duration = new int[CustomersAndDepots];
distance = new int[CustomersAndDepots,CustomersAndDepots];

forall(c in CustomersAndDepots){
	demand[c] = instance.demand[c>n?0:c];
	tw_start[c] = instance.tw_start[c>n?0:c];
	tw_end[c] = instance.tw_end[c>n?0:c];
	service_duration[c] = instance.service_duration[c>n?0:c];
}

forall(c1 in CustomersAndDepots, c2 in CustomersAndDepots){
	distance[c1,c2] = instance.distance[c1>n?0:c1,c2>n?0:c2];
}

Horizon = tw_start[Depots.getLow()]..tw_end[Depots.getLow()];

// ++++++++++++++++++++++++++++++ MODEL FOR THE VRPTW ++++++++++++++++++++++++++++++



Solver<CP> cp();

var<CP>{int} previous[CustomersAndDepots](cp,CustomersAndDepots);
var<CP>{int} routeOf[i in CustomersAndDepots](cp,1..K);
var<CP>{int} service_start[i in CustomersAndDepots](cp,Horizon);
var<CP>{int} departure[i in CustomersAndDepots](cp,Horizon);

solve<cp>{

         
         //nodes that can be reached from depot but only by going there first 
         /*
         forall(i in Customers:  tw_end[i] > distance[i, Depots.getUp()]) 
         {
            
            int path = 0;
            forall(j in Customers: j!=i && tw_end[i]>distance[j, Depots.getUp()]+distance[j,i]+service_duration[j])
               path = path+1;
            if(path==0)
            {
                  cp.post(previous[i] > Customers.getUp());
            }
         } */

         //a node can't have itself as previous node redundant with circuit
         /*
         forall(i in CustomersAndDepots)
            cp.post(previous[i]!=i);
         */

         //stop customers from being on the same route if it's impossible to serve both in time
         
         forall(i in Customers, j in Customers: i<j && max(tw_end[i]-(tw_start[j]+service_duration[j]), tw_end[j]-(tw_start[i]+service_duration[i]))<distance[i,j])
         {
            cp.post(routeOf[i]!=routeOf[j]);
            cp.post(previous[i]!=j);
            cp.post(previous[j]!=i);
         }
         
         
         //remove i from previous[j] domain when it's impossible to reach j in time from i
         /*
         forall(i in Customers, j in Customers: i<j && tw_start[i]+service_duration[i]+distance[i,j] > tw_end[j])
         {
            cp.post(previous[j]!=i);
         }
         */

         
         
        forall(i in Customers) cp.post(routeOf[i] == routeOf[previous[i]]);
	forall(i in Depots) cp.post(routeOf[i] == i - Customers.getUp());
        
        cp.post(circuit(previous));

         
	cp.post(multiknapsack(routeOf, demand, all(k in 1..K) Q));

	forall(i in CustomersAndDepots){
            
		cp.post(service_start[i] == max(tw_start[i],departure[previous[i]] + distance[previous[i],i]));
		cp.post(service_start[i] <= tw_end[i]);
		cp.post(service_start[i] >= tw_start[i]);
	}

	

	forall(i in Customers){
                //cp.post(departure[i] <= tw_end[i] + service_duration[i]);
		cp.post(departure[i] ==  service_start[i] + service_duration[i]);
	}
	
	forall(i in Depots){
		cp.post(departure[i] == 0);
                
	}
        
        
        
	
} using	{
         //labelFF(previous);
         //assign previous to nodes starting with domain size variable ordering and distance as value ordering
         
         forall (i in CustomersAndDepots: !previous[i].bound()) by (previous[i].getSize()/10, tw_start[i])
            {
               
                tryall<cp>(j in CustomersAndDepots: previous[i].memberOf(j) && (!departure[j].bound() || departure[j]+distance[j,i]<tw_end[i])) by (distance[j,i])

                {
                    label(previous[i], j);
                    
                } 
                
            }

         
         /*
         forall (i in Customers: !routeOf[i].bound()) by (routeOf[i].getSize())
         {
            tryall<cp>(c in 1..K: routeOf[i].memberOf(c)) by (sum(j in Customers: routeOf[j].bound() && routeOf[j] == c )(distance[j,i])/sum(j in Customers: routeOf[j].bound())((int)(routeOf[j] == c)))
            {   
               label(routeOf[i], c);
               
            }
         } 
            */
         /*
         forall (i in CustomersAndDepots: !service_start[i].bound()) by (service_start[i].getSize())
         {
            tryall<cp>(t in service_start[i].getMin()..service_start[i].getMax(): service_start[i].memberOf(t)) by (t)
            {
               label(service_start[i], t);
            }
         } */

            
}

if(cp.isFeasible())
{
   if(K<Kup)
   {
      Kup = K;
      nch = cp.getNChoice();
      nf = cp.getNFail();
   }
   
   cout << " --> solution found ";
   
}
else
{
   Kdown = K;
   cout << " --> failure ";
}

cout << " in " << System.getCPUTime() - st0 << "ms " << endl;

} //end K search



//----------------------------------------------------------------------------------------------------------------------------------
// function to read the instance file

function instanceInfo fillVariablesFromInstance(string pathToFile){
	int n; int K; int Q;
	int[] xcoord;
	int[] ycoord;
	int[] demand;
	int[] tw_start;
	int[] tw_end;
	int[] service_duration;
	int[,] distance; 

	string filename = pathToFile;
	ifstream input(filename);
	input.getLine(); // instance number
	input.getLine(); // ...
	input.getLine(); // ...
	input.getLine(); // ...
	K = input.getInt();	// number of vehicles	
	Q = input.getInt();	// capacity Q of each vehicle
	input.getLine(); // ...
	input.getLine(); // ...
	input.getLine(); // ...
	input.getLine(); // ...
	stack{int[]} lines();
	int[] line;
	while(input.good()){
		int line[i in 0..6] = input.getInt();
		lines.push(line);	
	}
	lines.pop(); // remove last empty line
	n = lines.getSize() - 1;
	demand = new int[0..n];
	xcoord = new int[0..n];
	ycoord = new int[0..n];
	tw_start = new int[0..n];
	tw_end = new int[0..n];
	service_duration = new int[0..n];
	while(lines.getSize() > 0){	
		line = lines.pop();
		xcoord[line[0]] = line[1];
		ycoord[line[0]] = line[2];
		demand[line[0]] = line[3];
		tw_start[line[0]] = line[4]*100;
		tw_end[line[0]] = line[5]*100;
		service_duration[line[0]] = line[6]*100;
	}
	
	distance = new int[0..n,0..n];
	forall(c1 in 0..n, c2 in 0..n : c1 < c2){
		distance[c1,c2] = (int) (sqrt((xcoord[c1]-xcoord[c2])^2 + (ycoord[c1]-ycoord[c2])^2)*100);
		distance[c2,c1] = distance[c1,c2];
		distance[c1,c1] = 0; distance[c2,c2] = 0;
	}
	
	return new instanceInfo(n, K, Q, demand, tw_start, tw_end, service_duration, distance);
}



int t1 = System.getCPUTime();
cout << "time: " << t1 - t0 ;
cout << "; #choices = " << nch;
cout << "; #fail    = " << nf;
cout << "; K    = " << Kup << endl;
