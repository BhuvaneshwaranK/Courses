// import the CP library
import cotfd;

int t0 = System.getCPUTime();


// create the CP Solver 
Solver<CP> cp();
if(System.getArgs().getSize() != 4)
{
    cout<< "This program need 2 arguments, first a path to the plane description file and then a int representing the heuristic to use"<< endl;
    System.exit(-1);
}

string fString = System.getArgs()[2];
int heuristic = System.getArgs()[3].toInt();

int maxdelay = 0;
int maxPTime = -1;
int minPTime = -1;

ifstream file(fString);

int nbPlanes    = file.getInt();

range P         = 1..nbPlanes;

int prefLTime[P];
int indispTime[P];
int delayCost[P];

// Begin read file
forall(p in P)
{
    prefLTime[p] = file.getInt();
    indispTime[p] = file.getInt();
    delayCost[p] = file.getInt();
    maxdelay += indispTime[p] + 1;
    minPTime = (minPTime == -1 || minPTime > prefLTime[p])?prefLTime[p]:minPTime;
    maxPTime = (maxPTime == -1 || maxPTime < prefLTime[p])?prefLTime[p]:maxPTime;
}
//end readfile


range T = (minPTime-maxdelay)..(maxPTime+maxdelay);


var<CP>{int} lTime[P](cp, T);               //actual landing time
//var<CP>{int} tSlot[T](cp, 0..nbPlanes);     //which plane land when



minimize<cp>
    sum(p in P)(abs(lTime[p]-prefLTime[p])*delayCost[p])
subject to{
    forall(p1 in P)
    {
        cp.post(abs(lTime[p1] - prefLTime[p1])<maxdelay);
    }
    cp.post(alldifferent(lTime));
    forall(p1 in P, p2 in P: p1 != p2 && p1 > p2)
    {
        cp.post(!(lTime[p1] > lTime[p2]) || (lTime[p1] - lTime[p2]) > indispTime[p1]); 
        cp.post(cp.post(!(lTime[p2] > lTime[p1]) || (lTime[p2] - lTime[p1]) > indispTime[p2]));
    }
} using{
    switch(heuristic){
        case 0:
            labelFF(lTime);
            break;
        case 1:
            forall (p in P: !lTime[p].bound()) by (delayCost[p])
                tryall<cp>(t in T: lTime[p].memberOf(t)) by (abs(t - prefLTime[p]))
                {
                    label(lTime[p], t);
                } 
        case 2:
            forall (p in P: !lTime[p].bound()) by (indispTime[p])
                tryall<cp>(t in T: lTime[p].memberOf(t)) by (abs(t - prefLTime[p]))
                {
                    label(lTime[p], t);
                } 
        case 3:
            forall (p in P: !lTime[p].bound()) by (lTime[p].getSize())
                tryall<cp>(t in T: lTime[p].memberOf(t)) by (abs(t - prefLTime[p]))
                {
                    label(lTime[p], t);
                } 
    }
}

cout << lTime << endl;
forall (p in P)
{
    cout << "plane " << p << "from " <<  lTime[p] << "to " << lTime[p] + indispTime[p] << "pref time " << prefLTime[p] << "cost " << delayCost[p] << endl;        
}

cout << "maxdelay" << maxdelay<< endl;
cout << "maxPTime" << maxPTime<< endl;
cout << "minPTime" << minPTime<< endl;

int t1 = System.getCPUTime();
cout << "time: " << t1 - t0 << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
