// import the CP library
import cotfd;

int t0 = System.getCPUTime();


// create the CP Solver 
Solver<CP> cp();
int nbArgs = System.getArgs().getSize() ;
string fString;
int heuristic;

if(nbArgs < 4)
{
    cout<< "This program need at least 2 arguments, first a path to the item descriptions file and then a int representing the heuristic to use"<< endl;
    System.exit(-1);
}
else
{
fString = System.getArgs()[nbArgs-1];
heuristic = System.getArgs()[nbArgs-2].toInt();
}
/*
fString = "D:/INFO21/git/courses/LINGI2365-Constraint_programming/Assignment4/q3/knapsackInstances/knapsack-B-3.txt";
heuristic = 4;*/

ifstream file(fString);

int nbObjects = file.getInt();

range O = 1..nbObjects;

int oId[O];
int oWeight[O];
int oUsefullness[O];

// Begin read file
forall(o in O)
{
    oId[o] = file.getInt();
    oWeight[o] = file.getInt();
    oUsefullness[o] = file.getInt();
}

int knapsackCapacity = file.getInt();
//end readfile


var<CP>{int} objectsTaken[O](cp, 0..1);         



maximize<cp>
    sum(o in O)(objectsTaken[o]*oUsefullness[o])
subject to{
    cp.post(sum(o in O)(objectsTaken[o]*oWeight[o])<=knapsackCapacity);
} using{
    switch(heuristic){
        case 0: 
            labelFF(objectsTaken);
            break;
        case 1:
            forall (o in O: !objectsTaken[o].bound()) by (-oWeight[o])
                tryall<cp>(v in 0..1: objectsTaken[o].memberOf(v)) by (-v)
                {
                    label(objectsTaken[o], v);
                } 
                break;
        case 2:
            forall (o in O: !objectsTaken[o].bound()) by ((oUsefullness[o]-0.0)/oWeight[o])
                tryall<cp>(v in 0..1: objectsTaken[o].memberOf(v)) by (-v)
                {
                    label(objectsTaken[o], v);
                } 
                break;
        case 3:
            forall (o in O: !objectsTaken[o].bound()) by (oUsefullness[o])
                tryall<cp>(v in 0..1: objectsTaken[o].memberOf(v)) by (-v)
                {
                    label(objectsTaken[o], v);
                } 
                break;
        case 4:
            forall (o in O: !objectsTaken[o].bound()) by (oId[o])
                tryall<cp>(v in 0..1: objectsTaken[o].memberOf(v)) by (-v)
                {
                    label(objectsTaken[o], v);
                } 
                break;
           
    }
}

cout << objectsTaken << endl;
forall (o in O)
{
    cout << "object " << oId[o] << (objectsTaken[o] == 1)?" taken ":" not taken " <<  "usefullness " << oUsefullness[o] << " weight " << oWeight[o] << endl;        
}

int t1 = System.getCPUTime();
cout << "#time    = " << t1 - t0 << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getTotalNumberFailures() << endl;
